<?xml version="1.0" encoding="UTF-8"?>
<!--
 * @author Woohyeok Jun <woohyeok.jun@worksmobile.com>
 * @file PostMapper.xml
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.board.project.blockboard.mapper.PostMapper">
  <insert id="insertPost" parameterType="com.board.project.blockboard.dto.PostDTO" >
    INSERT INTO posts (
    <if test='postID != 0'>
      post_id,
    </if>
    user_id,
    board_id,
    company_id,
    post_title,
    post_content,
    post_register_time,
    post_content_except_htmltag,
    post_status
    )
    VALUES (
    <if test='postID != 0'>
      #{postID},
    </if>
    #{userID},
    #{boardID},
    #{companyID},
    #{postTitle},
    #{postContent},
    NOW(),
    #{postContentExceptHTMLTag},
    #{postStatus}
    )
    ON DUPLICATE KEY UPDATE
    board_id=#{boardID},
    post_title=#{postTitle},
    post_content=#{postContent},
    post_content_except_htmltag=#{postContentExceptHTMLTag},
    post_register_time=NOW(),
    post_status=#{postStatus}
    <selectKey keyProperty="postID" resultType="int" order="AFTER">
      <if test='postID != 0'>
        SELECT #{postID};
      </if>
      <if test='postID == 0'>
        SELECT LAST_INSERT_ID();
      </if>
    </selectKey>
  </insert>

  <delete id="deletePostByPostID" parameterType="int">
    DELETE FROM posts
    WHERE post_id=#{postID};
  </delete>

  <update id="updatePost" parameterType="com.board.project.blockboard.dto.PostDTO">
    UPDATE posts
    SET post_title=#{postTitle},
        post_content=#{postContent},
        post_content_except_htmltag=#{postContentExceptHTMLTag},
        post_last_update_time=NOW(),
        board_id=#{boardID},
        post_status=#{postStatus}
    WHERE post_id=#{postID};
  </update>

  <select id="searchPost" parameterType="string"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id AS postID,
    post.user_id AS userID,
    post.board_id AS boardID,
    post.company_id AS companyID,
    post.post_title AS postTitle,
    post.post_content AS postContent,
    post.post_register_time AS postRegisterTime,
    post.post_last_update_time AS postLastUpdateTime,
    board.board_name AS boardName,
    users.user_name AS userName
    FROM posts post
    JOIN boards board ON post.board_id = board.board_id
    JOIN users users ON post.user_id = users.user_id
    WHERE post.post_status = "normal"
    <include refid="searchOption"/>
    ORDER BY postRegisterTime DESC;
  </select>

  <update id="temporaryDeletePost" parameterType="com.board.project.blockboard.dto.PostDTO">
    UPDATE posts
    SET post_status="recycle"
    WHERE post_id=#{postID};
  </update>

  <update id="restorePost" parameterType="com.board.project.blockboard.dto.PostDTO">
    UPDATE posts
    SET post_status="normal"
    WHERE post_id=#{postID};
  </update>

  <select id="selectPostByAlarmId" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id               AS postID,
           post.user_id               AS userID,
           users.user_name            AS userName,
           post.board_id              AS boardID,
           post.company_id            AS companyID,
           post.post_title            AS postTitle,
           post.post_content          AS postContent,
           post.post_register_time    AS postRegisterTime,
           post.post_last_update_time AS postLastUpdateTime,
           post.post_status           AS postStatus,
           post.view_count            AS viewCount
    FROM posts post
        JOIN users ON post.user_id = users.user_id
        JOIN alarms alarm on post.post_id = alarm.post_id
    WHERE alarm.alarm_id = #{alarmId}
        AND post.post_status = "normal";
  </select>

  <select id="selectMyPosts" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id               AS postID,
           post.user_id               AS userID,
           users.user_name            AS userName,
           post.board_id              AS boardID,
           board.board_name           AS boardName,
           post.company_id            AS companyID,
           post.post_title            AS postTitle,
           post.post_content          AS postContent,
           post.post_register_time    AS postRegisterTime,
           post.post_last_update_time AS postLastUpdateTime,
           post.post_status           AS postStatus,
           post.view_count            AS viewCount
    FROM   posts post
           JOIN users users ON post.user_id = users.user_id
           JOIN boards board ON post.board_id = board.board_id
    WHERE  post.user_id = #{user.userID} AND
           post.post_status = "normal"
    ORDER  BY post.post_register_time DESC
    LIMIT  #{startIndex},#{pageSize};
  </select>

  <select id="selectMyPostsIncludeMyReplies" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT  DISTINCT post.post_id AS postID,
            post.user_id AS userID,
            post.board_id AS boardID,
            post.company_id AS companyID,
            post.post_title AS postTitle,
            post.post_content AS postContent,
            post.post_register_time AS postRegisterTime,
            users.user_name AS userName,
            board.board_name AS boardName,
            post.view_count AS viewCount
    FROM    posts post
       JOIN  users users ON post.user_id = users.user_id
       JOIN  boards board ON post.board_id = board.board_id
       JOIN  comments comment ON post.post_id = comment.post_id
    WHERE  comment.user_id = #{user.userID} AND
           post.post_status = "normal"
    ORDER BY post.post_register_time DESC
    LIMIT  #{startIndex},#{pageSize};
  </select>

  <select id="selectMyRecyclePosts" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT  post.post_id AS postID,
            post.user_id AS userID,
            post.board_id AS boardID,
            board.board_name AS boardName,
            post.company_id AS companyID,
            post.post_title AS postTitle,
            post.post_content AS postContent,
            post.post_register_time AS postRegisterTime,
            users.user_name AS userName,
            post.post_status AS postStatus
    FROM    posts post
       JOIN users users ON post.user_id = users.user_id
       JOIN boards board ON post.board_id = board.board_id
    WHERE
            post.user_id=#{user.userID} AND
            post.company_id=#{user.companyID} AND
            post.post_status="recycle"
    ORDER BY postRegisterTime DESC
    LIMIT  #{startIndex},#{pageSize};
  </select>

  <select id="selectMyTempPosts" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id AS postID,
        post.user_id AS userID,
        post.board_id AS boardID,
        post.company_id AS companyID,
        post.post_title AS postTitle,
        post.post_content AS postContent,
        post.post_register_time AS postRegisterTime,
        users.user_name AS userName,
        board.board_name AS boardName,
        post.post_status AS postStatus
    FROM   posts post
           JOIN users users
            ON post.user_id = users.user_id
           JOIN boards board
            ON post.board_id = board.board_id
    WHERE
        post.user_id=#{user.userID} AND
        post.post_status="temp"
    ORDER BY
        postRegisterTime DESC
    LIMIT  #{startIndex}, #{pageSize};
  </select>

  <select id="selectRecentPosts" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT  post.post_id AS postID,
        post.user_id AS userID,
        post.board_id AS boardID,
        board.board_name AS boardName,
        post.company_id AS companyID,
        post.post_title AS postTitle,
        post.post_content AS postContent,
        post.post_register_time AS postRegisterTime,
        users.user_name AS userName,
        post.view_count AS viewCount
    FROM    posts post
       JOIN users users ON post.user_id = users.user_id
       JOIN boards board ON post.board_id = board.board_id
    WHERE  DATE(post.post_register_time) >= DATE(SUBDATE(NOW(), INTERVAL 30 DAY)) AND
           post.company_id = #{user.companyID} AND
           post.post_status = "normal"
    ORDER BY post.post_register_time DESC
    LIMIT  #{startIndex},#{pageSize};
  </select>

  <select id="getMyPostsCount" parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  user_id = #{userID} AND
           post_status = "normal"
  </select>

  <select id="getPostsCountIncludeMyReplies"
    parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="int">
    SELECT DISTINCT Count(post.post_id)
    FROM   posts post
        JOIN comments comment ON post.post_id = comment.post_id
    WHERE  comment.user_id = #{userID} AND
           post_status = "normal"
  </select>

  <select id="getMyTempPostsCount" parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  user_id = #{userID} AND
           post_status = "temp"
  </select>

  <select id="getMyRecyclePostsCount" parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  user_id = #{userID} AND
           post_status = "recycle"
  </select>

  <select id="getRecentPostsCount" parameterType="int" resultType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  DATE(post_register_time) >= DATE(SUBDATE(NOW(), INTERVAL 30 DAY)) AND
           company_id = #{companyID} AND
           post_status = "normal"
  </select>

  <sql id="searchOption">
    AND
    <choose>
      <!-- 검색옵션이 제목 일 경우 -->
      <when test="option == 'title'">
        (post.post_title LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 작성자 일 경우 -->
      <when test="option == 'writer'">
        (users.user_name LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 내용 일 경우 -->
      <when test="option == 'content'">
        (post.post_content_except_htmltag LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 제목+내용 일 경우 -->
      <when test="option == 'titleAndContent'">
        (post.post_title LIKE CONCAT('%',#{keyword},'%') OR post.post_content_except_htmltag LIKE
        CONCAT('%',#{keyword},'%'))
      </when>
    </choose>
  </sql>

  <!--@author Dongwook Kim <dongwook.kim1211@worksmobile.com>-->
  <select id="selectPostByBoardID" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id               AS postID,
           post.user_id               AS userID,
           users.user_name            AS userName,
           post.board_id              AS boardID,
           board.board_name           AS boardName,
           post.company_id            AS companyID,
           post.post_title            AS postTitle,
           post.post_content          AS postContent,
           post.post_register_time    AS postRegisterTime,
           post.post_last_update_time AS postLastUpdateTime,
           post.post_status           AS postStatus,
           post.view_count            AS viewCount
    FROM   posts post
           JOIN users users ON post.user_id = users.user_id
           JOIN boards board ON post.board_id = board.board_id
    WHERE  post.board_id = #{boardID} AND
           post.post_status = "normal"
    ORDER  BY post.post_register_time DESC
    LIMIT  #{startIndex}, #{pageSize};
  </select>

  <!--게시글 id로 게시글반환-->
  <!--@author Dongwook Kim <dongwook.kim1211@worksmobile.com>-->
  <select id="selectPostByPostID" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id            AS postID,
           post.user_id            AS userID,
           users.user_name         AS userName,
           post.board_id           AS boardID,
           post.company_id         AS companyID,
           post.post_title         AS postTitle,
           post.post_content       AS postContent,
           post.post_register_time AS postRegisterTime,
           post.post_last_update_time AS postLastUpdateTime,
           post.post_status        AS postStatus,
           post.view_count            AS viewCount
    FROM   posts post
           JOIN users users
            ON post.user_id = users.user_id
    WHERE  post.post_id = #{postID}
  </select>

  <select id="selectPostCountByBoardID" resultType="int" parameterType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  board_id = #{boardID};
  </select>

  <select id="selectUserIDByPostID" resultType="string" parameterType="int">
    SELECT user_id
    FROM posts
    WHERE post_id = #{postID};
  </select>

  <update id="updateViewCnt" parameterType="int">
    UPDATE posts
    SET    view_count = view_count + 1
    WHERE  post_id = #{postID};
  </update>

  <select id="selectPopularPostListByCompanyID" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id               AS postID,
           post.user_id               AS userID,
           users.user_name            AS userName,
           post.board_id              AS boardID,
           boards.board_name          AS boardName,
           post.company_id            AS companyID,
           post.post_title            AS postTitle,
           post.post_content          AS postContent,
           post.post_register_time    AS postRegisterTime,
           post.post_last_update_time AS postLastUpdateTime,
           post.post_status           AS postStatus,
           post.view_count            AS viewCount
    FROM   posts post
           JOIN users users
             ON post.user_id = users.user_id
           JOIN boards boards
             ON post.board_id = boards.board_id
    WHERE  post.company_id = #{companyID} AND
           post.post_status = "normal"
    ORDER  BY post.view_count DESC
    LIMIT  0, 10;
  </select>

  <select id="getPopularPostsCount" parameterType="int" resultType="int">
    SELECT Count(post_id)
    FROM   posts
    WHERE  company_id = #{companyID} AND
           post_status = "normal"
  </select>
</mapper>