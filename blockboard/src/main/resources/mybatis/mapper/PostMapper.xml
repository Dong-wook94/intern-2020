<?xml version="1.0" encoding="UTF-8"?>
<!--
 * @author Woohyeok Jun <woohyeok.jun@worksmobile.com>
 * @file PostMapper.xml
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.board.project.blockboard.mapper.PostMapper">
  <insert id="insertPost" parameterType="com.board.project.blockboard.dto.PostDTO">
    INSERT INTO posts (
    <if test='postID != 0'>
      post_id,
    </if>
    user_id,
    board_id,
    company_id,
    post_title,
    post_content,
    post_content_except_htmltag,
    post_register_time,
    post_status )
    VALUES (
    <if test='postID != 0'>
      #{postID},
    </if>
    #{userID},
    #{boardID},
    #{companyID},
    #{postTitle},
    #{postContent},
    #{postContentExceptHTMLTag},
    NOW(),
    #{postStatus} )
    ON DUPLICATE KEY UPDATE
    board_id=#{boardID},
    post_title=#{postTitle},
    post_content=#{postContent},
    post_content_except_htmltag=#{postContentExceptHTMLTag},
    post_register_time=NOW(),
    post_status=#{postStatus};
  </insert>

  <delete id="deletePostByPostID" parameterType="int">
        DELETE FROM posts
        WHERE post_id=#{postID};
    </delete>

  <update id="updatePost" parameterType="com.board.project.blockboard.dto.PostDTO">
        UPDATE posts
        SET post_title=#{postTitle},
            post_content=#{postContent},
            post_content_except_htmltag=#{postContentExceptHTMLTag},
            post_last_update_time=NOW(),
            board_id=#{boardID}
        WHERE post_id=#{postID};
    </update>

  <select id="searchPost" parameterType="string"
    resultType="com.board.project.blockboard.dto.PostDTO">
    SELECT post.post_id AS postID,
    post.user_id AS userID,
    post.board_id AS boardID,
    post.company_id AS companyID,
    post.post_title AS postTitle,
    post.post_content AS postContent,
    post.post_register_time AS postRegisterTime,
    post.post_last_update_time AS postLastUpdateTime,
    board.board_name AS boardName,
    users.user_name AS userName
    FROM posts post
    JOIN boards board
    ON post.board_id = board.board_id
    JOIN users users
    ON post.user_id = users.user_id
    WHERE
    <include refid="searchOption"/>
    ORDER BY postRegisterTime DESC;
  </select>

  <select id="selectRecentTempPost" parameterType="hashMap"
    resultType="com.board.project.blockboard.dto.PostDTO">
        SELECT post_id AS postID,
            user_id AS userID,
            board_id AS boardID,
            company_id AS companyID,
            post_title AS postTitle,
            post_content AS postContent,
            post_register_time AS postRegisterTime,
            post_status AS postStatus
        FROM
            posts
        WHERE
            user_id=#{userID} AND
            company_id=#{companyID} AND
            json_extract(post_status, '$.isTemp') = true
        ORDER BY
            postRegisterTime DESC
        LIMIT
            1;
    </select>

  <select id="selectTempPosts" parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="com.board.project.blockboard.dto.PostDTO">
        SELECT post.post_id AS postID,
            post.user_id AS userID,
            post.board_id AS boardID,
            post.company_id AS companyID,
            post.post_title AS postTitle,
            post.post_content AS postContent,
            post.post_register_time AS postRegisterTime,
            users.user_name AS userName,
            json_extract(post.post_status, '$.isTemp') AS isTemp
        FROM   posts post
               JOIN users users
                ON post.user_id = users.user_id
        WHERE
            post.user_id=#{userID} AND
            post.company_id=#{companyID} AND
            json_extract(post.post_status, '$.isTemp') = true
        ORDER BY
            postRegisterTime DESC;
    </select>

  <update id="temporaryDeletePost" parameterType="com.board.project.blockboard.dto.PostDTO">
        UPDATE posts
        SET post_status=#{postStatus}
        WHERE post_id=#{postID};
  </update>

  <select id="selectPostsInTrashBox" parameterType="com.board.project.blockboard.dto.UserDTO"
    resultType="com.board.project.blockboard.dto.PostDTO">
        SELECT  post.post_id AS postID,
                post.user_id AS userID,
                post.board_id AS boardID,
                post.company_id AS companyID,
                post.post_title AS postTitle,
                post.post_content AS postContent,
                post.post_register_time AS postRegisterTime,
                users.user_name AS userName,
                json_extract(post.post_status, '$.isTrash') AS isTrash
        FROM    posts post
           JOIN users users ON post.user_id = users.user_id
        WHERE
                post.user_id=#{userID} AND
                post.company_id=#{companyID} AND
                json_extract(post.post_status, '$.isTrash') = true
        ORDER BY
                postRegisterTime DESC;
    </select>

  <update id="restorePost" parameterType="com.board.project.blockboard.dto.PostDTO">
        UPDATE posts
        SET post_status=#{postStatus}
        WHERE post_id=#{postID};
  </update>

  <sql id="searchOption">
    <choose>
      <!-- 검색옵션이 제목 일 경우 -->
      <when test="option == 'title'">
        (post.post_title LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 작성자 일 경우 -->
      <when test="option == 'writer'">
        (users.user_name LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 내용 일 경우 -->
      <when test="option == 'content'">
        (post.post_content_except_htmltag LIKE CONCAT('%',#{keyword},'%'))
      </when>
      <!-- 검색옵션이 제목+내용 일 경우 -->
      <when test="option == 'titleAndContent'">
        (post.post_title LIKE CONCAT('%',#{keyword},'%') OR post.post_content_except_htmltag LIKE
        CONCAT('%',#{keyword},'%'))
      </when>
    </choose>
  </sql>

  <!--@author Dongwook Kim <dongwook.kim1211@worksmobile.com>-->
  <select id="selectPostByBoardID" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
        SELECT post.post_id            AS postID,
               post.user_id            AS userID,
               users.user_name          AS userName,
               post.board_id           AS boardID,
               post.company_id         AS companyID,
               post.post_title         AS postTitle,
               post.post_content       AS postContent,
               post.post_register_time AS postRegisterTime,
               post.post_last_update_time AS postLastUpdateTime,
               post.post_status        AS postStatus
        FROM   posts post
               JOIN users users
                ON post.user_id = users.user_id
        WHERE  post.board_id = #{boardID} AND
               (json_extract(post.post_status, '$.isTemp') = false AND
                    json_extract(post.post_status, '$.isTrash') = false)
        ORDER  BY post.post_id DESC;
    </select>

  <!--게시글 id로 게시글반환-->
  <!--@author Dongwook Kim <dongwook.kim1211@worksmobile.com>-->
  <select id="selectPostByPostID" parameterType="int"
    resultType="com.board.project.blockboard.dto.PostDTO">
        SELECT post.post_id            AS postID,
               post.user_id            AS userID,
               users.user_name         AS userName,
               post.board_id           AS boardID,
               post.company_id         AS companyID,
               post.post_title         AS postTitle,
               post.post_content       AS postContent,
               post.post_register_time AS postRegisterTime,
               post.post_last_update_time AS postLastUpdateTime,
               post.post_status        AS postStatus
        FROM   posts post
               JOIN users users
                ON post.user_id = users.user_id
        WHERE  post.post_id = #{postID}
    </select>
</mapper>